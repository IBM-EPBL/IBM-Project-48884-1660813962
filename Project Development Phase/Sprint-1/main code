{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WCvFidSE_Ge7"
      },
      "outputs": [],
      "source": [
        "import random\n",
        "import ibmiotf.application\n",
        "import ibmiotf.device\n",
        "from time import sleep\n",
        "import sys\n",
        "#IBM Watson Device Credentials.\n",
        "organization = \"op701j\"\n",
        "deviceType = \"Dheepak\"\n",
        "deviceId = \"Dheepak50\"\n",
        "authMethod = \"token\"\n",
        "authToken = \"1223334444\"\n",
        "def myCommandCallback(cmd):\n",
        " print(\"Command received: %s\" % cmd.data['command'])\n",
        " status=cmd.data['command']\n",
        " if status==\"sprinkler_on\":\n",
        "    print (\"sprinkler is ON\")\n",
        " else :\n",
        "    print (\"sprinkler is OFF\")\n",
        " #print(cmd)\n",
        "\n",
        "\n",
        "try:\n",
        " deviceOptions = {\"org\": organization, \"type\": deviceType, \"id\": deviceId, \"auth-method\": authMethod, \"auth-token\": authToken}\n",
        " deviceCli = ibmiotf.device.Client(deviceOptions)\n",
        "except Exception as e:\n",
        "    print(\"Caught exception connecting device: %s\" % str(e))\n",
        "sys.exit()\n",
        "#Connecting to IBM watson.\n",
        "deviceCli.connect()\n",
        "while True:\n",
        "#Getting values from sensors.\n",
        " temp_sensor = round( random.uniform(0,80),2)\n",
        " PH_sensor = round(random.uniform(1,14),3)\n",
        " camera = [\"Detected\",\"Not Detected\",\"Not Detected\",\"Not Detected\",\"Not Detected\",\"Not Detected\",]\n",
        " camera_reading = random.choice(camera)\n",
        " flame = [\"Detected\",\"Not Detected\",\"Not Detected\",\"Not Detected\",\"Not Detected\",\"Not Detected\",]\n",
        " flame_reading = random.choice(flame)\n",
        " moist_level = round(random.uniform(0,100),2)\n",
        " water_level = round(random.uniform(0,30),2)\n",
        "\n",
        "#storing the sensor data to send in json format to cloud.\n",
        "\n",
        " temp_data = { 'Temperature' : temp_sensor }\n",
        " PH_data = { 'PH Level' : PH_sensor }\n",
        " camera_data = { 'Animal attack' : camera_reading}\n",
        " flame_data = { 'Flame' : flame_reading }\n",
        " moist_data = { 'Moisture Level' : moist_level}\n",
        " water_data = { 'Water Level' : water_level}\n",
        "\n",
        "# publishing Sensor data to IBM Watson for every 5-10 seconds.\n",
        " success = deviceCli.publishEvent(\"Temperature sensor\", \"json\", temp_data, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print (\" ............................publish ok............................. \")\n",
        " print (\"Published Temperature = %s C\" % temp_sensor, \"to IBM Watson\")\n",
        "\n",
        " success = deviceCli.publishEvent(\"PH sensor\", \"json\", PH_data, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print (\"Published PH Level = %s\" % PH_sensor, \"to IBM Watson\")\n",
        "\n",
        " success = deviceCli.publishEvent(\"camera\", \"json\", camera_data, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print (\"Published Animal attack %s \" % camera_reading, \"to IBM Watson\")\n",
        " success = deviceCli.publishEvent(\"Flame sensor\", \"json\", flame_data, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print (\"Published Flame %s \" % flame_reading, \"to IBM Watson\")\n",
        "\n",
        " success = deviceCli.publishEvent(\"Moisture sensor\", \"json\", moist_data, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "     print (\"Published Moisture Level = %s \" % moist_level, \"to IBM Watson\")\n",
        "\n",
        " success = deviceCli.publishEvent(\"Water sensor\", \"json\", water_data, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print (\"Published Water Level = %s cm\" % water_level, \"to IBM Watson\")\n",
        " print (\"\")\n",
        " #Automation to control sprinklers by present temperature an to send alert message to IBM Watson.\n",
        "\n",
        " if (temp_sensor > 35):\n",
        "    print(\"sprinkler-1 is ON\")\n",
        " success = deviceCli.publishEvent(\"Alert1\", \"json\",{ 'alert1' : \"Temperature(%s) is high, sprinkerlers are turned ON\" %temp_sensor }\n",
        ", qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print( 'Published alert1 : ', \"Temperature(%s) is high, sprinkerlers are turned ON\" %temp_sensor,\"to IBM Watson\")\n",
        " print(\"\")\n",
        "else:\n",
        " print(\"sprinkler-1 is OFF\")\n",
        " print(\"\")\n",
        "\n",
        " #To send alert message if farmer uses the unsafe fertilizer to crops.\n",
        "\n",
        " if (PH_sensor > 7.5 or PH_sensor < 5.5):\n",
        "    success = deviceCli.publishEvent(\"Alert2\", \"json\",{ 'alert2' : \"Fertilizer PH level(%s) is not safe,use other fertilizer\" %PH_sensor } ,\n",
        "qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print('Published alert2 : ' , \"Fertilizer PH level(%s) is not safe,use other fertilizer\" %PH_sensor,\"to IBM Watson\")\n",
        " print(\"\")\n",
        "\n",
        " #To send alert message to farmer that animal attack on crops.\n",
        "\n",
        " if (camera_reading == \"Detected\"):\n",
        "    success = deviceCli.publishEvent(\"Alert3\", \"json\", { 'alert3' : \"Animal attack on crops detected\" }, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print('Published alert3 : ' , \"Animal attack on crops detected\",\"to IBM Watson\",\"to IBM Watson\")\n",
        " print(\"\")\n",
        " #To send alert message if flame detected on crop land and turn ON the splinkers to take immediate action.\n",
        "\n",
        " if (flame_reading == \"Detected\"):\n",
        "    print(\"sprinkler-2 is ON\")\n",
        " success = deviceCli.publishEvent(\"Alert4\", \"json\", { 'alert4' : \"Flame is detected crops are in danger,sprinklers turned ON\" }, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print( 'Published alert4 : ' , \"Flame is detected crops are in danger,sprinklers turned ON\",\"to IBM Watson\")\n",
        "\n",
        " #To send alert message if Moisture level is LOW and to Turn ON Motor-1 for irrigation.\n",
        " if (moist_level < 20):\n",
        "    print(\"Motor-1 is ON\")\n",
        " success = deviceCli.publishEvent(\"Alert5\", \"json\", { 'alert5' : \"Moisture level(%s) is low, Irrigation started\" %moist_level }, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print('Published alert5 : ' , \"Moisture level(%s) is low, Irrigation started\" %moist_level,\"to IBM Watson\" )\n",
        " print(\"\")\n",
        " #To send alert message if Water level is HIGH and to Turn ON Motor-2 to take water out.\n",
        " if (water_level > 20):\n",
        "    print(\"Motor-2 is ON\")\n",
        " success = deviceCli.publishEvent(\"Alert6\", \"json\", { 'alert6' : \"Water level(%s) is high, so motor is ON to take water out \"\n",
        "%water_level }, qos=0)\n",
        " sleep(1)\n",
        " if success:\n",
        "    print('Published alert6 : ' , \"water level(%s) is high, so motor is ON to take water out \" %water_level,\"to IBM Watson\" )\n",
        "    print(\"\")\n",
        " #command recived by farmer\n",
        "deviceCli.commandCallback = myCommandCallback\n",
        "# Disconnect the device and application from the cloud\n",
        "deviceCli.disconnect()"
      ]
    }
  ]
}